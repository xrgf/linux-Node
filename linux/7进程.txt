回顾：
	字节文件 二进制     字符文件。
	创建目录
	获取文件状态
	遍历目录
	文件映射虚拟内存   就是另一种文件操作方式 
		open  ==  open + mmap
		open write的时候自动改大小
		open 了 然后 mmap  大小固定

进程：
	了解进程：
		1. 进程的定义   一个运行中的程序（progress）
			源程序文件。   可执行程序文件。

			进程是操作系统资源调度的基本单位。
				内存的最小单位   		bit位
				内存的最小管理单位  	字节
			古代  交税：
				田税     ： 户 
				人头税   ： 人

			资源：内存 cpu时间片 fd 。。。。		

		2. 进程的组成
			数据：全局变量 静态变量（已初始化 未初始化） 只读变量 局部变量
			代码：进程的源代码
			堆栈：变量 手动内存分配(malloc new)

		3. 进程模式
			用户模式：应用程序正常运行
			内核模式：调用系统调用  用户模式切换到内核模式 
				开车 ：
					油电混 

					电池 ---> 发动机 
					内燃机---> 发动机

		4. 进程的状态
			top   
			ps  -aut
			用来显示进程的信息

			运行时R 睡眠S 挂起T 等待W 死亡D 僵尸Z

		5. 进程的运行
			5.1 手动运行
				命令 执行可执行程序
			5.2 调度
				nice  renice  控制进程是否让步
				kill 
				crontab 
				bg 

		6. 进程的创建（程序里启动进程）
			6.1 system  ： 在程序中执行命令
			6.2 fork vfork：
				创建子进程
			6.3 exec簇  

		7. 进程的结束
			7.1 自然结束   main函数 return
			7.2 被动结束：
				os 结束  被内核进程结束
				被本进程或者其他进程干掉
			7.3 提防僵尸进程产生(占用的资源不会被释放)
				进程运行时占用的资源：会释放
				进程本身占用的资源：

				僵尸进程如何产生的：
					父进程先于子进程结束并且没有进程收养它。

				父进程结束前子进程结束了，父进程会回收子进程的资源。
				父进程结束后，子进程被父进程的父进程收养了，爷爷进程会回收子进程的资源。

				父进程等子进程结束后再结束。



代码：
	1. 创建和结束进程

	2. 父子进程
	3. 守护进程


所有进程都是 init进程的 子进程或者孙子进程或者重孙进程
整体就是一个树结构。

每个进程都有一个唯一的正整数id 

每个进程都有一个对应的目录在/proc 目录下


fork: 以克隆的方式创建一个进程 创建成功返回被创建的进程的id，然后父子进程一起往下运行。
	以克隆方式：
		全盘复制当前进程 包括进程上下文。
		父进程的代码 子进程有份一模一样的！


进程上下文：进程运行到当前的这个地方。（数据，时间，状态）

调用fork的进程   父进程
被fork创建的进程 子进程

	父进程的fork  返回的是 子进程的id
	子进程的fork  有没有返回值  

作业：
	写一个程序    父进程显示一个随机数     usleep     
				 子进程显示当前系统时间    sleep(1)

				 