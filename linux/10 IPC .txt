回顾：
	信号       本质      整数
	可靠1-31 不可靠 32-64
	标准信号 自定义信号

	信号发送：
		内核
		命令
		进程
	注册信号处理：  signal 
		给进程内  某个信号 注册个信号处理函数

	kill  

	高级信号处理：sigaction   sigqueue
		处理信号的时候   能接受额外数据

	sigwinch  终端大小改变
	sigalarm  时钟信号
		alarm  		发送一个14信号
		setitimer  	发送很多个14信号

	sigprocmask

IPC:Inter Process Communication
	 内核   进程        通信

共享内存：
	内核会维护主机上的一块内存段 
	多个进程可以访问这块内存段。

消息队列：
	在主机上   指定 一个或者多个队列
	多个进程可以访问这些队列。

旗语(信号量)
	希望 多个进程 错开时间 访问同一块区域
		有一个整数  
			有一些进程可以去操作这个整数 
				加  随时可以加
				减	0以上  随便减  不能减到0以下


需要有个唯一的东东。。。
key    一般通过fd  来创建这个key
	文件描述符号  fd   文件  具备唯一性

ftok


普通文件 管道  mmap 信号  IPC  网络通信  

POSIX 
ANSI		

共享内存  shm  share memory
	1. 创建key  		ftok
	2. 创建共享内存	shmget
	3. 挂载共享内存  shmat
	4. 卸载共享内存	shmdt
	5. 删除共享内存	shmctl

#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>

int shmget(key_t key, size_t size, 
int shmflg);//IPC_CREAT  IPC_EXECL 
void *shmat(
	int shmid, //shmget的返回值
	const void *shmaddr,//地址 
	int shmflg);//

int shmdt(const void *shmaddr);
int shmctl(
	int shmid, 
	int cmd, 
	struct shmid_ds*buf);


用来查看当前主机上IPC的命令:ipc
ipcs  查看
	-m   shm
	-q   msg
	-s   sem
ipcrm  删除
	-m   shm
	-q   msg
	-s   sem


消息队列： msg  message  queue
	1. 创建key
	2. 创建消息队列	msgget
	3. 收发消息		msgrcv   msgsnd
	4. 删除消息队列  msgctl
int msgsnd(int msqid, 
const void *msgp, 
size_t msgsz, 
int msgflg);

ssize_t msgrcv(
int msqid, 
void *msgp, 
size_t msgsz, 
long msgtyp,
int msgflg);

struct msgbuf {
    long mtype;       /* message type, must be > 0 */
    char mtext[1];    /* message data */
};


信号量编程模型：sem  semaphore
	1. 创建key
	2. 创建信号量   semget
	3. 初始化信号量 semctl
	4. 使用信号量   semop
		加 减
	5. 删除信号量   semctl
int semctl(int semid, int semnum, int cmd, ...);
union semun {
    int              val;    /* Value for SETVAL */
    struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
    unsigned short  *array;  /* Array for GETALL, SETALL */
    struct seminfo  *__buf;  /* Buffer for IPC_INFO (Linux-specific) */
};

int semop(int semid, struct sembuf *sops, size_t nsops);

struct sembuf{
	unsigned short  semval;   /* semaphore value */
    unsigned short  semzcnt;  /* # waiting for zero */
    unsigned short  semncnt;  /* # waiting for increase */
    pid_t           sempid;   /* ID of process that did last op */
    unsigned short sem_num;  /* semaphore number */
    short          sem_op;   /* semaphore operation */
    short          sem_flg;
};

进程的组织形式：
	进程 
	多个进程会组成一个进程组    进程组的组长叫session进程  s
	多个进程组会组成一个会话


守护进程：
	1. 独立  记录某个进程的情况      系统日志
	2. 如何查看当前系统上的守护进程
		ps axj 
		TPGID 为 -1 
	3. 如何创建一个守护进程
		3.1 守护进程要实现功能和其他进程一样实现
		3.2 先创建一个进程，然后把这个进程变成守护进程
			3.2.1 把它的父进程干掉
			3.2.2 摆脱终端控制
			3.2.3 创建新的会话
				摆脱原有会话和进程组的控制
		3.3 两种守护进程创建的模型
			第一种：
				1. 创建新会话    		setsid
				2. 改变当前工作目录 		chdir
				3. 重新设置当前文件权限   umask
				4. 关闭文件				close
			第二种：
				1. 重新设置当前文件权限   umask
				2. 创建子进程			fork
				3. 让父进程结束
				4. 创建新的会话       	setsid
				5. 防止子进程成为僵尸进程 忽略掉 SIGCHLD SIGHUP信号
				6. 改变当前工作目录       chdir
				7. 重定向文件描述符号		open dup2(fd,0)    

作业：
	之前用管道实现的  尝试着用 IPC里的三种方式去实现。