写代码:
	编辑器     	编辑 源程序文件  *.c *.cpp *.py *.sh *.java
	编译器		把源程序文件  翻译成   可执行程序文件
			源程序文件    中文（自然语言）  编程语言(C C++)
		翻译 	
			机器语言   
	调试器		断点调试
	其他工具 	spy++ ...

俗称的编译器其实应该叫  集成开发环境IDE	 vs vsCode QtCreator

	GNU ：GNU  is Not  Unix
		gcc   g++   GDB

gcc命令
	预处理:
		gcc -E *.c  
		g++ -E *.cpp
		gcc -E *.o -o 

	执行所有的预处理指令：
		头文件引入
		宏展开
		预处理指令执行
			#pragma 
			#if 

	编译:
		gcc -c *.c 		只编译
			生成目标文件(elf文件 机器语言)
			windows上是 *.obj

		1. 协同合作
			多人同时工作  单独编译

		gcc -S *.c     生成汇编

		逆向 ：
			汇编   反汇编  。。。

	链接：
		gcc *.o 
使用现成的：
windows上：
	#include 添加头文件
	#pragma comment(lib,"*.lib") 		加载库
linux：
	#include 添加头文件           		/usr/include   
	加载库   链接的时候   加 -l选项   	/lib /usr/lib
	例如：gcc *.c -l m
自己制作：
windows上：
vs 建动态库静态库工程

		静态链接库：
			链接的时候把源代码拿过来  在生成的可执行程序文件里边
		动态链接库： 
			运行的时候把源代码拿过来  不在生成的可执行程序文件里边

		1. 让可执行程序文件相对比较小
		2. 灵活！！！

		动态库缺点：
			依赖库文件

制作静态库：
	1. 仅编译生成目标文件
		gcc -c *.c -o *.o
	2. 通过目标文件生成 静态库文件
		ar rc lib*lib.a *.o
使用静态库：
	1. 使用当前文件夹下的  像使用 目标文件*.o 一样使用
		gcc *.o lib*lib.a -o *.exe
	2. 自己做的一般保存在/opt目录下
		gcc *.o -L /opt -l *lib
		-L 指定路径
		-l 指定目录名

制作动态库：
	gcc -shared *.c -o lib*lib.so
使用动态库：
	1. 使用当前文件夹下的  像使用 目标文件*.o 一样使用
		gcc lib*lib.so
	2. 自己做的一般保存在/opt目录下
		gcc *.o -L /opt -l *lib

例如 ： math.h里的函数 sqrt


makefile:自动化编译脚本
	cmake qmake

#注释

总目标:总目标的依赖
	使用依赖生成目标的命令
分支目标:分支目标的依赖
	使用依赖生成目标的命令

makefile 写好后  使用make命令即可
清理命令 ：
	make clean

变量 ： 和shell脚本的变量一样 直接使用
	取值同样用$

$@ 目标
$< 依次的依赖   
%  匹配多个名字

作业：
	挑一个C里面的有多个函数的代码用多文档编程 makefile 来编译。

交作业：
	截图（截取最终效果图就好）  发我qq邮箱

