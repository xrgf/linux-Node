回顾：
	管道   文件描述符号
	先入先出的  数据传输通道
	在同一主机上的不同进程间进行数据传输

	匿名管道    没有管道文件   只有两个文件描述符号
		fds[0]  读
		fds[1]  写
			pipe
	有名管道
		mkfifo 创建管道文件 
		同时打开 
			一边打开   	用来读
			另外一边打开 用来写

信号：
	本质是个整数
	用户模式下  信号  是用来    模拟    硬件中断   的

	硬件中断：物理层面的   中断
	软件中断：模拟硬件中断

	信号的产生：
		硬件
		内核
		进程

	qt：   		信号与槽 
		中断
	windows： 	消息
		轮询 

等信息：
	轮询方式：
		隔1秒看一次手机   看看是不是信息来了
	中断方式：
		设置信息提示音 信息来了就放（最炫名族风）

信号的处理过程：
	进程A正在运行  
	进程B发送一个SIGINT信号
	进程A收到 SIGINT 信号 ，默认处理 （进程结束）

#include <signal.h>

typedef void (*sighandler_t)(int);

sighandler_t   signal(int  signum,
    sighandler_t handler);


ctrl c       2    SIGINT
ctrl \		 9 	  SIGQUIT

linux提供的信号： 64个
	不可靠信号 (非实时)     unix提供的       	1-31
	可靠信号(实时)			后来扩充  		32-64

	标准：操作系统提供
	自定义：用户自定义   


int sigaction(
	int signum, 
	const struct sigaction *act,
    struct sigaction *oldact);

struct sigaction {
    void     (*sa_handler)(int);
    void     (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t   sa_mask;
    int        sa_flags;
    void     (*sa_restorer)(void);
};


siginfo_t {
    int      si_signo;     /* Signal number */
    int      si_errno;     /* An errno value */
    int      si_code;      /* Signal code */
    int      si_trapno;    /* Trap number that caused
 hardware-generated signal(unused on most architectures) */
    pid_t    si_pid;       /* Sending process ID */
    uid_t    si_uid;       /* Real user ID of sending process */
    int      si_status;    /* Exit value or signal */
    clock_t  si_utime;     /* User time consumed */
    clock_t  si_stime;     /* System time consumed */
    sigval_t si_value;     /* Signal value */
    int      si_int;       /* POSIX.1b signal */
    void    *si_ptr;       /* POSIX.1b signal */
    int      si_overrun;   /* Timer overrun count; POSIX.1b timers */
    int      si_timerid;   /* Timer ID; POSIX.1b timers */
    void    *si_addr;      /* Memory location which caused fault */
    long     si_band;      /* Band event (was int in
glibc 2.3.2 and earlier) */
    int      si_fd;        /* File descriptor */
    short    si_addr_lsb;  /* Least significant bit of address (since Linux 2.6.32) */
    void    *si_call_addr; /* Address of system call instruction(since Linux 3.5) */
    int      si_syscall;   /* Number of attempted system call (since Linux 3.5) */
    unsigned int si_arch;  /* Architecture of attempted system call(since Linux 3.5) */
}


sigaction：
	不仅仅可以接收信号作信号处理，还能在接收信号的同时接收一些信息

kill -s  信号  进程id

kill函数：
	简单信号发送

#include <signal.h>

int sigqueue(pid_t pid, 
int sig, 
const union sigval value);

union sigval {
    int   sival_int;
    void *sival_ptr;
};

多个信号可以用一个信号处理函数来处理   见 sigwinch.c

定时器： 定时 发送 SIGALARM（14） 信号
	alarm 函数


信号集：多个信号的集合
	sigset_t 
#include <signal.h>
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signum);
int sigdelset(sigset_t *set, int signum);
int sigismember(const sigset_t *set, int signum);

sigprocmask

os 内核维护一个信号队列
	如果产生了信号    入队
	注册了信号处理的话  从队列中取出信号  进行处理 

	如果屏蔽某个信号 
	那么 会  不从队列中取出处理

	直到解除屏蔽  再行处理(多次信号合并一次处理)

int sigprocmask(
	int how,		//SIG_BLOCK 屏蔽 SIG_UNBLOCK 解除屏蔽
	const sigset_t *set, //信号集
	sigset_t *oldset);


作业：
	1. 用管道传输文件的作业     传输完后要结束进程 
			用信号来结束进程。

	2. 测试 屏蔽多个信号

选做（可以不做）：
	进程A： 销售人员		售卖产品
	进程B： 工厂   		生产产品
	进程C： 仓库			监管

	仓库里没产品了     通知销售人员停止销售行为 通知工厂生产
	生产出5个产品      通知销售人员开始销售 
	囤积了100个产品    通知工厂停产

	通过信号实现通知。。。
	建议可以先    实现    两个进程的  例如 先实现  A C 