回顾：
	1. 什么是进程：
		运行中的程序
		操作系统资源分配的基本单位
	2. 进程的状态 进程的组成 进程的运行 进程的结束 。。
	3. 父子进程：
		被创建的进程   子进程
		创建进程的进程 父进程

		linux系统 所有进程都是 init进程的子进程  0 
		每个进程都有一个唯一的进程id  正整数
		普通进程在  /proc 目录下有子目录
	4. 僵尸进程   如何避免其产生
		进程已结束但没有回收进程资源。

		如何避免其产生：子进程先结束
		 	1. 父进程晚于子进程结束
		 		时间方面  子进程先结束 父进程后结束
		 		wait 父进程等待子进程结束
		 	2. 父进程结束后其他进程领养

作业：
	父进程     每隔   10ms  输出一个随机数
	子进程     每隔	  1s   输出当前时间


2个进程：
	父 一个进程  		持续不断滚动输出
	子 另外一个进程  		持续不断等待用户输入 

	进程间通信：
		1. 普通文件
			两个进程访问同一个文件    先后顺序

		2. 文件映射虚拟内存
			父子进程之间
		3. 管道
		4. 信号
		5. IPC之   共享内存 
		6. IPC之   消息队列
		7. IPC之   信号量（旗语）
		8. 网络通信 


管道：
	管道是个文件 FIFO First In First Out 
	匿名管道：没有名字
		父子进程之间
		直接使用文件描述符号
			fds[0] 用来读
			fds[1] 用来写
		//1 创建描述符号 2个
			int fds[2];  
		//2 把文件描述符号变成管道
			pipe
		//3 使用管道进行通信

		//4 关闭
			close(fds[0]);
			close(fds[1]);

	有名管道：有名字
		可以在同一主机上不同进程之间操作    有具体的文件

		A									B
	//1 创建管道文件(mkfifo)
	//2 打开管道文件						//1 打开管道文件
				open
	//3 使用管道文件 读	 				//2 使用管道文件 写
			read write
	//4 关闭 							//3 关闭
			close
	//5 删除管道文件
			unlink


	管道一边打开后 阻塞 ！  等待另一边打开  结束open函数。

copy on write：写时拷贝
	只有当需要写的时候才拷贝。只是进行读操作，不进行拷贝。

	子进程拷贝父进程的所有代码。
		父进程有个 int n;   
		父子进程后面没有操作n的时候   os中只有一个n 父子进程都用这个n
		当有一个进程要改n的值的时候   就拷贝一份  父进程有个n 子进程也有个n


作业：
	1. 使用匿名管道实现     抽奖程序
	2. 使用有名管道实现     文件传输
		从主目录下  传递一个文件到    主目录下的test目录下

		提示：
			先传输文件名
			再传输文件大小
			再循环传文件内容
		Send							Recv
	创建有名管道
	打开管道文件						打开管道文件
	发送文件名						接受文件名
	打开文件，获取文件大小			创建文件
	发送文件大小						接受文件大小
	循环发送文件内容，发完结束循环		循环接受文件大小 接受完毕 结束循环
	关闭要发送的文件					关闭接受的文件
	关闭管道文件						关闭管道文件
	删除管道文件